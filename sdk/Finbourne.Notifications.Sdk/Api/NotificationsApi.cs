/*
 * FINBOURNE Notifications API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.915
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Notifications.Sdk.Client;
using Finbourne.Notifications.Sdk.Model;

namespace Finbourne.Notifications.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>Notification</returns>
        Notification CreateAwsSqsNotification(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification);

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> CreateAwsSqsNotificationWithHttpInfo(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification);
        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>Notification</returns>
        Notification CreateAwsSqsPrincipalAuthNotification(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification);

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> CreateAwsSqsPrincipalAuthNotificationWithHttpInfo(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification);
        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <returns>Notification</returns>
        Notification CreateEmailNotification(string scope, string code, CreateEmailNotification createEmailNotification);

        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> CreateEmailNotificationWithHttpInfo(string scope, string code, CreateEmailNotification createEmailNotification);
        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <returns>Notification</returns>
        Notification CreateSmsNotification(string scope, string code, CreateSmsNotification createSmsNotification);

        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> CreateSmsNotificationWithHttpInfo(string scope, string code, CreateSmsNotification createSmsNotification);
        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <returns>Notification</returns>
        Notification CreateWebhookNotification(string scope, string code, CreateWebhookNotification createWebhookNotification);

        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> CreateWebhookNotificationWithHttpInfo(string scope, string code, CreateWebhookNotification createWebhookNotification);
        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns></returns>
        void DeleteNotification(string scope, string code, string id);

        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotificationWithHttpInfo(string scope, string code, string id);
        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns>Notification</returns>
        Notification GetNotification(string scope, string code, string id);

        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> GetNotificationWithHttpInfo(string scope, string code, string id);
        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <returns>ResourceListOfNotification</returns>
        ResourceListOfNotification ListNotifications(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <returns>ApiResponse of ResourceListOfNotification</returns>
        ApiResponse<ResourceListOfNotification> ListNotificationsWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        Notification UpdateAwsSqsNotification(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification);

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> UpdateAwsSqsNotificationWithHttpInfo(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification);
        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        Notification UpdateAwsSqsPrincipalAuthNotification(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification);

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> UpdateAwsSqsPrincipalAuthNotificationWithHttpInfo(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification);
        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        Notification UpdateEmailNotification(string scope, string code, string id, UpdateEmailNotification updateEmailNotification);

        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> UpdateEmailNotificationWithHttpInfo(string scope, string code, string id, UpdateEmailNotification updateEmailNotification);
        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        Notification UpdateSmsNotification(string scope, string code, string id, UpdateSmsNotification updateSmsNotification);

        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> UpdateSmsNotificationWithHttpInfo(string scope, string code, string id, UpdateSmsNotification updateSmsNotification);
        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription.
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        Notification UpdateWebhookNotification(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification);

        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> UpdateWebhookNotificationWithHttpInfo(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> CreateAwsSqsNotificationAsync(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> CreateAwsSqsNotificationWithHttpInfoAsync(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> CreateAwsSqsPrincipalAuthNotificationAsync(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> CreateAwsSqsPrincipalAuthNotificationWithHttpInfoAsync(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> CreateEmailNotificationAsync(string scope, string code, CreateEmailNotification createEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> CreateEmailNotificationWithHttpInfoAsync(string scope, string code, CreateEmailNotification createEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> CreateSmsNotificationAsync(string scope, string code, CreateSmsNotification createSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> CreateSmsNotificationWithHttpInfoAsync(string scope, string code, CreateSmsNotification createSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> CreateWebhookNotificationAsync(string scope, string code, CreateWebhookNotification createWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> CreateWebhookNotificationWithHttpInfoAsync(string scope, string code, CreateWebhookNotification createWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotificationAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationWithHttpInfoAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> GetNotificationAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> GetNotificationWithHttpInfoAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfNotification</returns>
        System.Threading.Tasks.Task<ResourceListOfNotification> ListNotificationsAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfNotification>> ListNotificationsWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateAwsSqsNotificationAsync(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateAwsSqsNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateAwsSqsPrincipalAuthNotificationAsync(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateAwsSqsPrincipalAuthNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateEmailNotificationAsync(string scope, string code, string id, UpdateEmailNotification updateEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateEmailNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateEmailNotification updateEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateSmsNotificationAsync(string scope, string code, string id, UpdateSmsNotification updateSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateSmsNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateSmsNotification updateSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateWebhookNotificationAsync(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateWebhookNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApi : INotificationsApiSync, INotificationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationsApi : INotificationsApi
    {
        private Finbourne.Notifications.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi(String basePath)
        {
            this.Configuration = Finbourne.Notifications.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Notifications.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Notifications.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Notifications.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Notifications.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Notifications.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationsApi(Finbourne.Notifications.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Notifications.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Notifications.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Notifications.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotificationsApi(Finbourne.Notifications.Sdk.Client.ISynchronousClient client, Finbourne.Notifications.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Notifications.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Notifications.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Notifications.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Notifications.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Notifications.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Notifications.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>Notification</returns>
        public Notification CreateAwsSqsNotification(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = CreateAwsSqsNotificationWithHttpInfo(scope, code, createAwsSqsNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> CreateAwsSqsNotificationWithHttpInfo(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateAwsSqsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateAwsSqsNotification");

            // verify the required parameter 'createAwsSqsNotification' is set
            if (createAwsSqsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createAwsSqsNotification' when calling NotificationsApi->CreateAwsSqsNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createAwsSqsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAwsSqsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> CreateAwsSqsNotificationAsync(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await CreateAwsSqsNotificationWithHttpInfoAsync(scope, code, createAwsSqsNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsNotification: Add an AWS SQS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> CreateAwsSqsNotificationWithHttpInfoAsync(string scope, string code, CreateAwsSqsNotification createAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateAwsSqsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateAwsSqsNotification");

            // verify the required parameter 'createAwsSqsNotification' is set
            if (createAwsSqsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createAwsSqsNotification' when calling NotificationsApi->CreateAwsSqsNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createAwsSqsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAwsSqsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>Notification</returns>
        public Notification CreateAwsSqsPrincipalAuthNotification(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = CreateAwsSqsPrincipalAuthNotificationWithHttpInfo(scope, code, createAwsSqsPrincipalAuthNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> CreateAwsSqsPrincipalAuthNotificationWithHttpInfo(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'createAwsSqsPrincipalAuthNotification' is set
            if (createAwsSqsPrincipalAuthNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createAwsSqsPrincipalAuthNotification' when calling NotificationsApi->CreateAwsSqsPrincipalAuthNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createAwsSqsPrincipalAuthNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqsprincipalauth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAwsSqsPrincipalAuthNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> CreateAwsSqsPrincipalAuthNotificationAsync(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await CreateAwsSqsPrincipalAuthNotificationWithHttpInfoAsync(scope, code, createAwsSqsPrincipalAuthNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateAwsSqsPrincipalAuthNotification: Add an AWS SQS notification with principal authentication to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="createAwsSqsPrincipalAuthNotification">The data to create an message sent to AWS Simple Queue Service</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> CreateAwsSqsPrincipalAuthNotificationWithHttpInfoAsync(string scope, string code, CreateAwsSqsPrincipalAuthNotification createAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'createAwsSqsPrincipalAuthNotification' is set
            if (createAwsSqsPrincipalAuthNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createAwsSqsPrincipalAuthNotification' when calling NotificationsApi->CreateAwsSqsPrincipalAuthNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createAwsSqsPrincipalAuthNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqsprincipalauth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAwsSqsPrincipalAuthNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <returns>Notification</returns>
        public Notification CreateEmailNotification(string scope, string code, CreateEmailNotification createEmailNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = CreateEmailNotificationWithHttpInfo(scope, code, createEmailNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> CreateEmailNotificationWithHttpInfo(string scope, string code, CreateEmailNotification createEmailNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateEmailNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateEmailNotification");

            // verify the required parameter 'createEmailNotification' is set
            if (createEmailNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createEmailNotification' when calling NotificationsApi->CreateEmailNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createEmailNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/api/subscriptions/{scope}/{code}/notifications/email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> CreateEmailNotificationAsync(string scope, string code, CreateEmailNotification createEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await CreateEmailNotificationWithHttpInfoAsync(scope, code, createEmailNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createEmailNotification">The data to create a email notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> CreateEmailNotificationWithHttpInfoAsync(string scope, string code, CreateEmailNotification createEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateEmailNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateEmailNotification");

            // verify the required parameter 'createEmailNotification' is set
            if (createEmailNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createEmailNotification' when calling NotificationsApi->CreateEmailNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createEmailNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <returns>Notification</returns>
        public Notification CreateSmsNotification(string scope, string code, CreateSmsNotification createSmsNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = CreateSmsNotificationWithHttpInfo(scope, code, createSmsNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> CreateSmsNotificationWithHttpInfo(string scope, string code, CreateSmsNotification createSmsNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateSmsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateSmsNotification");

            // verify the required parameter 'createSmsNotification' is set
            if (createSmsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createSmsNotification' when calling NotificationsApi->CreateSmsNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createSmsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/api/subscriptions/{scope}/{code}/notifications/sms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSmsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> CreateSmsNotificationAsync(string scope, string code, CreateSmsNotification createSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await CreateSmsNotificationWithHttpInfoAsync(scope, code, createSmsNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createSmsNotification">The data to create an SMS notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> CreateSmsNotificationWithHttpInfoAsync(string scope, string code, CreateSmsNotification createSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateSmsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateSmsNotification");

            // verify the required parameter 'createSmsNotification' is set
            if (createSmsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createSmsNotification' when calling NotificationsApi->CreateSmsNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createSmsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/sms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSmsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <returns>Notification</returns>
        public Notification CreateWebhookNotification(string scope, string code, CreateWebhookNotification createWebhookNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = CreateWebhookNotificationWithHttpInfo(scope, code, createWebhookNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> CreateWebhookNotificationWithHttpInfo(string scope, string code, CreateWebhookNotification createWebhookNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateWebhookNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateWebhookNotification");

            // verify the required parameter 'createWebhookNotification' is set
            if (createWebhookNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createWebhookNotification' when calling NotificationsApi->CreateWebhookNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createWebhookNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/api/subscriptions/{scope}/{code}/notifications/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhookNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> CreateWebhookNotificationAsync(string scope, string code, CreateWebhookNotification createWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await CreateWebhookNotificationWithHttpInfoAsync(scope, code, createWebhookNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="createWebhookNotification">The data to create a webhook notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> CreateWebhookNotificationWithHttpInfoAsync(string scope, string code, CreateWebhookNotification createWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->CreateWebhookNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->CreateWebhookNotification");

            // verify the required parameter 'createWebhookNotification' is set
            if (createWebhookNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'createWebhookNotification' when calling NotificationsApi->CreateWebhookNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = createWebhookNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhookNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns></returns>
        public void DeleteNotification(string scope, string code, string id)
        {
            DeleteNotificationWithHttpInfo(scope, code, id);
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Object> DeleteNotificationWithHttpInfo(string scope, string code, string id)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->DeleteNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->DeleteNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->DeleteNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/subscriptions/{scope}/{code}/notifications/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotificationAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteNotificationWithHttpInfoAsync(scope, code, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Object>> DeleteNotificationWithHttpInfoAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->DeleteNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->DeleteNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->DeleteNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/subscriptions/{scope}/{code}/notifications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns>Notification</returns>
        public Notification GetNotification(string scope, string code, string id)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = GetNotificationWithHttpInfo(scope, code, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> GetNotificationWithHttpInfo(string scope, string code, string id)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->GetNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->GetNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->GetNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Get<Notification>("/api/subscriptions/{scope}/{code}/notifications/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> GetNotificationAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await GetNotificationWithHttpInfoAsync(scope, code, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetNotification: Get a notification on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> GetNotificationWithHttpInfoAsync(string scope, string code, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->GetNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->GetNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->GetNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <returns>ResourceListOfNotification</returns>
        public ResourceListOfNotification ListNotifications(string scope, string code)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<ResourceListOfNotification> localVarResponse = ListNotificationsWithHttpInfo(scope, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <returns>ApiResponse of ResourceListOfNotification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<ResourceListOfNotification> ListNotificationsWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->ListNotifications");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->ListNotifications");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfNotification>("/api/subscriptions/{scope}/{code}/notifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotifications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfNotification</returns>
        public async System.Threading.Tasks.Task<ResourceListOfNotification> ListNotificationsAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<ResourceListOfNotification> localVarResponse = await ListNotificationsWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListNotifications: List all notifications on a subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfNotification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<ResourceListOfNotification>> ListNotificationsWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->ListNotifications");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->ListNotifications");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfNotification>("/api/subscriptions/{scope}/{code}/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotifications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        public Notification UpdateAwsSqsNotification(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = UpdateAwsSqsNotificationWithHttpInfo(scope, code, id, updateAwsSqsNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> UpdateAwsSqsNotificationWithHttpInfo(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateAwsSqsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateAwsSqsNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateAwsSqsNotification");

            // verify the required parameter 'updateAwsSqsNotification' is set
            if (updateAwsSqsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateAwsSqsNotification' when calling NotificationsApi->UpdateAwsSqsNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAwsSqsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAwsSqsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateAwsSqsNotificationAsync(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await UpdateAwsSqsNotificationWithHttpInfoAsync(scope, code, id, updateAwsSqsNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsNotification: Update an AWS SQS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> UpdateAwsSqsNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateAwsSqsNotification updateAwsSqsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateAwsSqsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateAwsSqsNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateAwsSqsNotification");

            // verify the required parameter 'updateAwsSqsNotification' is set
            if (updateAwsSqsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateAwsSqsNotification' when calling NotificationsApi->UpdateAwsSqsNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAwsSqsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAwsSqsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        public Notification UpdateAwsSqsPrincipalAuthNotification(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = UpdateAwsSqsPrincipalAuthNotificationWithHttpInfo(scope, code, id, updateAwsSqsPrincipalAuthNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> UpdateAwsSqsPrincipalAuthNotificationWithHttpInfo(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'updateAwsSqsPrincipalAuthNotification' is set
            if (updateAwsSqsPrincipalAuthNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateAwsSqsPrincipalAuthNotification' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAwsSqsPrincipalAuthNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqsprincipalauth/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAwsSqsPrincipalAuthNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateAwsSqsPrincipalAuthNotificationAsync(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await UpdateAwsSqsPrincipalAuthNotificationWithHttpInfoAsync(scope, code, id, updateAwsSqsPrincipalAuthNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateAwsSqsPrincipalAuthNotification: Update an AWS SQS notification with principal authentication for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a notification</param>
        /// <param name="code">The code that identifies a notification</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateAwsSqsPrincipalAuthNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> UpdateAwsSqsPrincipalAuthNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateAwsSqsPrincipalAuthNotification updateAwsSqsPrincipalAuthNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");

            // verify the required parameter 'updateAwsSqsPrincipalAuthNotification' is set
            if (updateAwsSqsPrincipalAuthNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateAwsSqsPrincipalAuthNotification' when calling NotificationsApi->UpdateAwsSqsPrincipalAuthNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAwsSqsPrincipalAuthNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/awssqsprincipalauth/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAwsSqsPrincipalAuthNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        public Notification UpdateEmailNotification(string scope, string code, string id, UpdateEmailNotification updateEmailNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = UpdateEmailNotificationWithHttpInfo(scope, code, id, updateEmailNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> UpdateEmailNotificationWithHttpInfo(string scope, string code, string id, UpdateEmailNotification updateEmailNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateEmailNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateEmailNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateEmailNotification");

            // verify the required parameter 'updateEmailNotification' is set
            if (updateEmailNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateEmailNotification' when calling NotificationsApi->UpdateEmailNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateEmailNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/api/subscriptions/{scope}/{code}/notifications/email/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateEmailNotificationAsync(string scope, string code, string id, UpdateEmailNotification updateEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await UpdateEmailNotificationWithHttpInfoAsync(scope, code, id, updateEmailNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateEmailNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> UpdateEmailNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateEmailNotification updateEmailNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateEmailNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateEmailNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateEmailNotification");

            // verify the required parameter 'updateEmailNotification' is set
            if (updateEmailNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateEmailNotification' when calling NotificationsApi->UpdateEmailNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateEmailNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/email/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        public Notification UpdateSmsNotification(string scope, string code, string id, UpdateSmsNotification updateSmsNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = UpdateSmsNotificationWithHttpInfo(scope, code, id, updateSmsNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> UpdateSmsNotificationWithHttpInfo(string scope, string code, string id, UpdateSmsNotification updateSmsNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateSmsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateSmsNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateSmsNotification");

            // verify the required parameter 'updateSmsNotification' is set
            if (updateSmsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateSmsNotification' when calling NotificationsApi->UpdateSmsNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateSmsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/api/subscriptions/{scope}/{code}/notifications/sms/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSmsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateSmsNotificationAsync(string scope, string code, string id, UpdateSmsNotification updateSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await UpdateSmsNotificationWithHttpInfoAsync(scope, code, id, updateSmsNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateSmsNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> UpdateSmsNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateSmsNotification updateSmsNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateSmsNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateSmsNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateSmsNotification");

            // verify the required parameter 'updateSmsNotification' is set
            if (updateSmsNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateSmsNotification' when calling NotificationsApi->UpdateSmsNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateSmsNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/sms/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSmsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <returns>Notification</returns>
        public Notification UpdateWebhookNotification(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification)
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = UpdateWebhookNotificationWithHttpInfo(scope, code, id, updateWebhookNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> UpdateWebhookNotificationWithHttpInfo(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateWebhookNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateWebhookNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateWebhookNotification");

            // verify the required parameter 'updateWebhookNotification' is set
            if (updateWebhookNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateWebhookNotification' when calling NotificationsApi->UpdateWebhookNotification");

            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateWebhookNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/api/subscriptions/{scope}/{code}/notifications/webhook/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhookNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateWebhookNotificationAsync(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Notifications.Sdk.Client.ApiResponse<Notification> localVarResponse = await UpdateWebhookNotificationWithHttpInfoAsync(scope, code, id, updateWebhookNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription. 
        /// </summary>
        /// <exception cref="Finbourne.Notifications.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a subscription</param>
        /// <param name="code">The code that identifies a subscription</param>
        /// <param name="id">The unique identifier of the notification</param>
        /// <param name="updateWebhookNotification">The data to update a notification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Notifications.Sdk.Client.ApiResponse<Notification>> UpdateWebhookNotificationWithHttpInfoAsync(string scope, string code, string id, UpdateWebhookNotification updateWebhookNotification, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling NotificationsApi->UpdateWebhookNotification");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling NotificationsApi->UpdateWebhookNotification");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationsApi->UpdateWebhookNotification");

            // verify the required parameter 'updateWebhookNotification' is set
            if (updateWebhookNotification == null)
                throw new Finbourne.Notifications.Sdk.Client.ApiException(400, "Missing required parameter 'updateWebhookNotification' when calling NotificationsApi->UpdateWebhookNotification");


            Finbourne.Notifications.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Notifications.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Notifications.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Finbourne.Notifications.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateWebhookNotification;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.915");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/api/subscriptions/{scope}/{code}/notifications/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhookNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}